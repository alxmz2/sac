\input texinfo

@c NOTE: This template-standalone.texi shows how to create a texinfo file
@c that yields a stand-alone SAC.info file.
@c See template.texi for a texinfo file which is to be part of maxima.info.

@c NOTE: The content of this file was determined by tedious trial and error.
@c My advice is to keep all elements of this template, from \input to @bye,
@c otherwise you'll experience cryptic error messages, hair loss, etc.

@c makeinfo SAC.texi         to make .info
@c texi2html SAC.texi        to make .html
@c texi2pdf SAC.texi         to make .pdf

@setfilename sac.info
@settitle SAC: Symbolic Analysis and Control package

@ifinfo
@macro var {expr}
<\expr\>
@end macro
@end ifinfo

@dircategory Mathematics/Maxima
@direntry
* SAC: (maxima/sac).           Maxima share package Symbolic Analysis and Control package.
@end direntry

@setchapternewpage odd
@c end of header


@node Top, Introduction to SAC, (dir), (dir)
@top
@menu
* Introduction to SAC::
* Definitions for SAC::
* Function and variable index::
@end menu
@chapter SAC

@node Introduction to SAC, Definitions for SAC, Top, Top
@section Introduction to SAC

The Symbolic Analysis and Control package ( @code{SAC} ) is a toolbox that provides several routines for the analysis and control of nonlinear systems with or without time delays including, amongst others, properties like accessibility, observability, equivalence with the triangular form, and linearization by input/output injection, and control problems like the disturbance rejection and operations between noncommutative polynomials and matrix like the Smith form, Euclidean division, wedge product, and so on.

These tools are based on the so-called differential algebraic approach, which is a very promising method in the study of nonlinear
time delay systems.

@code{SAC} is written in Maxima, an open-source free computer algebra system
which can be compiled on many systems, including windows, linux, and MacOS
X.

@node Definitions for SAC, Function and variable index, Introduction to SAC, Top
@section Definitions for SAC

@subsection Operators
@anchor{ncprod}
@fnindex NCProduct
@deffn {Operator} *^
Defines the non-commutative operator *^. This allows to multiply polynomials in
@math{\cal{K}[\delta)}.
@example
@group
(%i1) load("sac.mc")$
(%i2) x(t-1)*_D *^ x(t-2);
(%o2)              x(t - 3) x(t - 1) _D

@end group
@end example
The factors may be matrices.
@example
@group
(%i3) matrix([_D^2,1],[_D,_D+x[2](t)])*^matrix([x[1](t)],[u(t)]);
                  [                      2                 ]
                  [          x (t - 2) _D  + u(t)          ]
(%o3)             [           1                            ]
                  [                                        ]
                  [ (x (t - 1) + u(t - 1)) _D + x (t) u(t) ]
                  [   1                          2         ]
@end group
@end example
The right factor may also be a p-form
@example
@group
(%i4) x[1](t)*_D*^(x[1](t)*del(x[2](t),u(t-2)));
(%o4)             - x (t - 1) x (t) del(u(t - 3), x (t - 1))
                     1         1                   2
@end group
@end example
Note that @math{\delta} is written as _D.
@end deffn

@anchor{differential}
@fnindex Differential
@deffn {Function} _d (@var{w})

Computes the differential form of a function or p-form @var{w}.
Given @math{f(z_\tau)}, this routine computes df:
@math{df = \sum_{i=1}^n \sum_{j=0}^s {{\displaystyle \partial f}\over{\displaystyle \partial z_i(t-j)}} dz_i(t-j)}.

The partial derivatives are taken against the variables which explicitely depend on @math{t}.

@example
@group
 (%i1) load("sac.mc")$
 (%i2) _d(x[1](t-2)*u(t)+x[1](t));
 (%o2)       del(x (t)) + x (t - 2) del(u(t)) + u(t) del(x (t - 2))
                  1        1                              1
@end group
@end example

If @math{ f} is a p-form, then it returns its differential, which is a (p+1)-form.
@example
@group
(%i3)  dlist:[x[1](t),(x[1](t)+x[2](t))*del(x[1](t)),
              (sin(u(t-1))+x[2](t-1)*u(t)^2)*del(x[2](t),u(t-1))];
(%o3) [x (t), (x (t) + x (t)) del(x (t)),
        1       2       1          1
                      2
        - (x (t - 1) u (t) + sin(u(t - 1))) del(u(t - 1), x (t))]
            2                                              2
(%i4) maplist(_d,dlist);
(%o4) [del(x (t)), - del(x (t), x (t)),
            1             1      2

(- 2 x (t - 1) u(t) del(u(t - 1), x (t), u(t)))
      2                            2

    2
 - u (t) del(x (t - 1), u(t - 1), x (t))]
              2                    2
@end group
@end example

@end deffn

@defvr {Variable} _D
Default value: @code{protected var}

_D represents the delay operator @math{\delta} defined as
@math{\delta f(t)=f(t-1)\delta} and
@math{\delta w(t)= w(t-1)}, where @math{f} is a function
and @math{w(t)} is a p-form.

_D is a reserved word, so it cannot be bonded to a value.  It is
used for the [non-commutative] polynomial product @ref{ncprod,*^}.
@end defvr

@anchor{ddt}
@fnindex Time-derivative
@deffn {Function} ddt (@var{f},@var{S})
@deffnx {Function} ddt (@var{f},@var{S},k)

Given a system S:@math{\dot{x}=f(x_\tau,u_\tau)} and a function
 @math{h(x_\tau,u_\tau^{(i)})}, find the time-derivative of h along
 the trajectories of S:
@math{{d\_dt}(h,S)=\sum_{j=0}^s \left( \sum_{i=1}^n{{\displaystyle \partial h}\over{\displaystyle \partial x(t-j)}}f(t-j)+ \sum_{k=0}^r {{\displaystyle \partial h}\over{\displaystyle \partial u^{(k)}(t-j)}} u^{(k+1)}(t-j)\right)}
@example
@group
(%i1) load("sac.mc")$
(%i2) S:systdef(matrix([x[2](t-1)],[u[1](t)]))$
(%i3) ddt(x[1](t)^2,S);
(%o3)                          2 x (t - 1) x (t)
                                  2         1
(%i4) ddt(x[1](t)^2,S,2);
                                               2
(%o4)                   2 u (t - 1) x (t) + 2 x (t - 1)
                           1         1         2
(%i5) ddt(x[1](t)^2,S,3);
                        d
(%o5)          2 x (t) (-- (u (t - 1))) + 6 u (t - 1) x (t - 1)
                  1     dt   1               1         2

(%i6) ddt(u[1](t)*del(x[1](t-1)),S);
               d
(%o6)         (-- (u (t))) del(x (t - 1)) + u (t) del(x (t - 2))
               dt   1           1            1         2
@end group
@end example
@xref{Lie}
@end deffn

@subsection Functions

@anchor{antider}
@deffn {Function} antider (@var{dw_1}, @var{dw_2}, ...)

This function returns the integral form of its argument, which can be a closed 1-form or
a list of closed 1-forms.
@example
@group
(%i1) load("sac.mc")$

(%i1) load("sac.mc")$
(%i2) L:[del(u(t)),x[1](t-1)*del(x[1](t-1))]$
(%i3) antider(L);
                                       2
                                      x (t - 1)
                                       1
(%o3)                          [u(t), ---------]
                                          2
@end group
@end example

If one of the arguments is not a closed 1-form (even if it is integrable), then it throws an error.
@example
@group
(%i4) antider(x[1](t)*del(x[2](t-1)));

argument is not a [list of ] closed 1-form[s]
@end group
@end example
The integration is done using the routine @code{potential}, from the "vect" package.
@xref{differential,_d}
@end deffn

@anchor{coefpow}
@deffn {Function} coefpow (@var{pol})

Given a polynomial @var{pol}, @math{p[\delta)=\sum_i p_i\delta^i}, where @math{p_i}  are scalar or matrix coefficients, it returns a list of the nonzero coefficients @math{p_i\in{\cal K}[\delta)}, and another list with the corresponding exponents @math{i}, in ascending order, that is
@math{[c,e]} where @math{c=[p_i\mid p_i\neq0]}, and
@math{e=[i\mid p_i\neq0]}, in ascending order.
@example
@group
(%i2) coefpow(_D^3+2);
(%o2)                        [[2, 1], [0, 3]]
(%i3) coefpow(matrix([_D^3+3],[_D]));
                        [ 3 ]  [ 0 ]  [ 1 ]
(%o159)               [[[   ], [   ], [   ]], [0, 1, 3]]
                        [ 0 ]  [ 1 ]  [ 0 ]
@end group
@end example

@end deffn


@anchor{dotfact}
@deffn {Function} dotfact (@var{w})
@deffnx {Function} dotfact (@var{w}, @var{flag})

Given a p-form
@math{\omega=\sum_{i=1}^s a_i\,dz_i=a dz} returns the column vectors
 @math{a = [a_1,\dots,a_s]^T} and
@math{dz=[d(z_1),\ldots,d(z_s)]^T}.

If the argument is a column vector of p-forms v,
it returns the matrices
M and dz=[d(z_1), ...,d(z_s)] such that
@math{\omega=M\,dz}.

If a second argument @var{flag} is given and is equal to 0,
then the factorization does not include the _D operator.

@example
@group
(%i1) load("sac.mc")$

(%i2) w:_d(x[1](t-3)*u(t-2));
(%o2)          x (t - 3) del(u(t - 2)) + u(t - 2) del(x (t - 3))
                1                                      1
(%i3) dotfact(w);
                       [            3  ]
                       [ u(t - 2) _D   ]  [ del(x (t)) ]
(%o3)                 [[               ], [      1     ]]
                       [             2 ]  [            ]
                       [ x (t - 3) _D  ]  [ del(u(t))  ]
                       [  1            ]
(%i4) dotfact(w,0);
                       [ u(t - 2)  ]  [ del(x (t - 3)) ]
(%o4)                 [[           ], [      1         ]]
                       [ x (t - 3) ]  [                ]
                       [  1        ]  [ del(u(t - 2))  ]
@end group
@end example
@xref{differential,_d}

@end deffn

@anchor{Euclid}
@deffn {Function} euclid (@var{a}, @var{b})

Given two poynomials a, b@math{\in{\cal{K}}[\delta)}, it performs the Euclid's division
to find q, r@math{\in{\cal{K}}[\delta)} such that  a=qb+r, where the polynomial
degree of pol.d(r) is strictly less than pol.d(b).
This function returns a polynomial matrix M=[q,r] such that a = q b + r, and deg(r)<deg(b).

@example
@group
(%i1) load("sac.mc")$
(%i2) a:x(t)*_D^2+2$
(%i3) b:u(t)*_D-1$
(%i4) d:euclid(a,b);
            [ x(t) _D        x(t)       2 u(t) u(t - 1) + x(t) ]
(%o4)/R/    [ -------- + -------------  ---------------------- ]
            [ u(t - 1)   u(t - 1) u(t)      u(t) u(t - 1)      ]
(%i5) fullratsimp(d[1][1]*^b+d[1][2]);
                                       2
(%o5)                           x(t) _D  + 2
@end group
@end example

@end deffn

    euclid() : ncalg.mc

@anchor{findel}
@deffn {Function} findel (matrix @var{M}, expr @var{e})
@deffnx {Function} findel (matrix @var{M}, expr @var{e}, int @var{idr})
@deffnx {Function} findel (matrix @var{M}, expr @var{e}, int @var{idr}, int @var{idc})

Given a matrix @var{M}, an element @var{e}, a row number @var{idr}, and a column
number @var{idc}, returns a list of all the pairs
[i,j] such that M[i,j]=e$, with i@math{\geq} @var{idr}, j@math{\geq} @var{idc}.
If only one index is given, it will be assigned to @var{idr}, and @var{idc} will be set
to 1.  If no index is given, then @var{idr}=@var{idc}=1.
@example
@group
 (%i1) load("sac.mc")$
 (%i2) M:genmatrix(lambda([i,j],(2*i-j)),4,10);
                [ 1  0  - 1  - 2  - 3  - 4  - 5  - 6  - 7  - 8 ]
                [                                              ]
                [ 3  2   1    0   - 1  - 2  - 3  - 4  - 5  - 6 ]
 (%o2)          [                                              ]
                [ 5  4   3    2    1    0   - 1  - 2  - 3  - 4 ]
                [                                              ]
                [ 7  6   5    4    3    2    1    0   - 1  - 2 ]
 (%i3) findel(M,-3);
 (%o3)                    [[1, 5], [2, 7], [3, 9]]
 (%i4) findel(M,1,2);
 (%o4)                    [[2, 3], [3, 5], [4, 7]]
 (%i5) findel(M,-3,2,6);
 (%o5)                        [[2, 7], [3, 9]]
@end group
@end example
@end deffn

@anchor{findmaxidx}
@deffn {Function} findmaxidx (@var{f}, @var{s})

Given an expression @var{f}, and a symbol @var{s}, this function
returns max k such that @math{\partial f/\partial s[k](t-\ell)\neq0}
for a delay @math{\ell\in\Re_+}.
@example
@group
(%i1) load("sac.mc")$
(%i2) w:matrix([sin(u[3](t-2)+u(t))+1],[x[4](t)])$
(%i3) findmaxidx(w,u);
(%o3)  3
(%i4) findmaxidx(w,x);
(%o4)  4
(%i5) findmaxidx(w,z);
(%o5)  minf
@end group
@end example
@xref{systdef}
@end deffn

@anchor{gradfnc}
@deffn {Function} gradfnc (@var{f}, @var{v})

Given a list of variables [v_1, ..., v_s], it will return the partial
derivative of function f(.) with respect to them:

@math{{gradfnc}(f,v)=\left[{{\displaystyle \partial f}\over{\displaystyle\partial v_1 }},\ldots,{{\displaystyle \partial f}\over{\displaystyle\partial v_s }}\right]}

@example
@group
(%i1) load("sac.mc")$
(%i2) gradfnc(((x[2](t-1))^2),[x[1](t-1),x[2](t-1)]);
(%o2)                [0, 2 x (t - 1)]
                      2
(%i3) gradfnc(matrix([x[2](t-1)^2],[x[1](t-1)*x[2](t)]),[x[1](t-1),x[2](t-1)]);
                      [   0    2 x (t - 1) ]
                      [           2        ]
(%o3)                       [                    ]
                      [ x (t)       0      ]
                      [  2                 ]
@end group
@end example

@end deffn

@anchor{nombrefn}
@deffn {Function} nombrefn (@var{pol})

Computes the submodules \f$H_k\f$. After calling this routine, a specific \f$H_k\f$ can be recovered using assoc(k,S@@hk).

@example
@group
(%i1) load("sac.mc")$
(%i2) f:matrix([s*(x[2](t)-x[1](t))+u(t)],[x[1](t)*(b-x[3](t))-x[2](t)],[x[1](t)*x[2](t)-a*x[3](t)]);
                         [ u(t) + s (x (t) - x (t))  ]
                         [            2       1      ]
                         [                           ]
(%o2)                    [ x (t) (b - x (t)) - x (t) ]
                         [  1          3        2    ]
                         [                           ]
                         [   x (t) x (t) - a x (t)   ]
                        [    1     2         3      ]
(%i3) lorenz:systdef(f)$
(%i4) hk(lorenz);
(%o4) [[2, [del(x (t)), del(x (t))]], [3,
                2           3
              [x (t) del(x (t)) - b del(x (t)) + x (t) del(x (t))]], [inf, 0]]
                3         3              3        2         2
(%i5) lorenz@@hk;
(%o5) [[2, [del(x (t)), del(x (t))]], [3,
                2           3
              [x (t) del(x (t)) - b del(x (t)) + x (t) del(x (t))]], [inf, 0]]
                3         3              3        2         2
(%i6) assoc(2,lorenz@@hk);
(%o6)         [del(x (t)), del(x (t))]
@end group
@end example

@end deffn

@anchor{isaccessible}
@deffn {Function} isaccessible (system @var{S})
Tests if the system @var{S} satisfies the strong
accessibility condition: @math{{\cal H}_\infty = 0}.

@example
@group
(%i1) load("sac.mc")$
(%i2) f:matrix([x[2](t-2)*u[1](t)],[u[2](t-3)])$
(%i3) S:systdef(f)$
(%i4) isaccessible(S);
(%o4)                                true
@end group
@end example
@xref{isclosed}
@end deffn

@anchor{isclosed}
@deffn {Function} isclosed (@var{w_1}, @var{w_2}, ...)

This routine checks if a 1-form or list of 1-forms are closed, that is,
every element of the list is a 1-form @var{w_i} satisfying
d(@var{w_i})=0 for all i=1,...

Any argument which is not a 1-form, will return false.

@example
@group
(%i1) load("sac.mc")$
(%i2) isclosed(u(t-1)*del(u(t-1)));
(%o2)                                true
(%i3) isclosed(u(t)*del(u(t-1)));
(%o3)                                false
@end group
@end example

If the argument is a list, it returns true only if all its elements
are closed 1-forms.

@example
@group
(%i5) isclosed([ u(t-1)*del(u(t-1)), u(t)*del(u(t-1)) ]);
(%o5)                                false
@end group
@end example

@end deffn

@anchor{isintegrable}
@deffn {Function} isintegrable (@var{w_1}, @var{w_2}, ...)

This routine checks if a 1-form or list of 1-forms is integrable using
the Frobenious theorem.  So far, it is not valid for time-delay systems.

@example
@group
(%i1) load("sac.mc")$
(%i2) isintegrable(x[2](t)*del(x[2](t))+del(x[3](t)));
(%o2)                               true
(%i3) isintegrable(x[1](t)*del(x[2](t))+del(x[3](t)));
(%o3)                               false
(%i4) isintegrable(x[1](t)*del(x[2](t))+del(x[3](t)),del(x[1](t)));
(%o4)                               true
@end group
@end example

@end deffn

@anchor{isobservable}
@deffn {Function} isobservable (system @var{S})

Given a system @var{S} with output y, it checks
the generic observability condition given by:

@math{rank_{{\cal K}[\delta)}{{\partial [y\ \dot y \cdots y^{(n-1)}]}\over{\partial x}}=n}
@example
@group
(%i1) load("sac.mc")$
(%i2) f:matrix([x[2](t-2)*u[1](t)],[u[2](t-3)])$
(%i3) h:x[1](t-1)$
(%i4) S:systdef([f,h],[x,u,y])$
(%i5) isobservable(S);
(%o5)                                true
@end group
@end example

Warning not tested for time-delay systems
@end deffn

@anchor{leftkernel}
@deffn {Function} leftkernel ( matrix @var{M} )

Returns a basis for the left kernel of a matrix with entries in
@math{ {\cal K}[\delta)}.

@example
@group
(%i1) load("sac.mc")$
(%i2) M:matrix([_D],[u(t)],[1+_D]);
                                  [   _D   ]
                                  [        ]
(%o2)                             [  u(t)  ]
                                  [        ]
                                  [ _D + 1 ]
(%i3) leftkernel(M);
                        [              _D            ]
                        [ 1       - --------       0 ]
                        [           u(t - 1)         ]
(%o3)                   [                            ]
                        [      u(t - 1) + u(t) _D    ]
                        [ 0  - ------------------  1 ]
                        [        u(t - 1) u(t)       ]
@end group
@end example

@end deffn

@anchor{Lie}
@deffn {Function} Lie (@var{h}, @var{S})
@deffnx  {Function} Lie (@var{f}, @var{S}, k)

Computes the k-th Lie derivative of h following the trajectory of S
of the polynomial @var{h}@math{\in{\cal K}[\delta)}

@example
@group
(%i1) load("sac.mc")$
(%i2) f:matrix([x[2](t-2)*u(t)],[x[1](t)]);
                              [ x (t - 2) u(t) ]
                              [  2             ]
(%o2)                         [                ]
                              [     x (t)      ]
                              [      1         ]
(%i3) s:systdef(f,[x,u])$
(%i4) lie(x[2](t-3)*_D,s,2);
(%o5)                        x (t - 5) u(t - 3) _D
                              2
@end group
@end example
@end deffn


@anchor{lorebez}
@deffn {Function} lorebez (@var{a}, @var{b})

Let @math{a,b\in{\cal{K}}[\delta)}. We call @math{\alpha,\ \beta}
Ore polynomials if they satisfy the left-Ore condition:
@math{\alpha\,a + \beta \, b = 0},
and we call them Bezout polynomials if they satisfy
@math{\alpha\,a + \beta \, b = gcld(a,b)}
where glcd(a,b) stands for greatest left common divisor of (a,b).
@example
@group
(%i1) load("sac.mc")$
(%i2) a:_D^2+1$
(%i3) b:x(t)$
(%i4) lorebez(a,b);
                   [             1            ]
                   [ 0          ----          ]
                   [            x(t)          ]
(%o4)/R/           [                          ]
                   [                   2      ]
                   [      x(t - 2) + _D  x(t) ]
                   [ 1  - ------------------- ]
                   [         x(t - 2) x(t)    ]
(%i5) lorebez(a,b)*^matrix([a],[b]);
                               [ 1 ]
(%o5)                          [   ]
                               [ 0 ]
@end group
@end example
@end deffn

@anchor{maxd}
@deffn {Function} maxd (@var{f})
Given a function, matrix, or p-form, it finds the maximum delay found in any
time-dependant variable.

@example
@group
(%i1) load("sac.mc")$
(%i2) maxd(x[3](t-1)*u(t-4));
(%o2)                        4
(%i3) maxd(
@end group
@end example

@end deffn

@anchor{ncgrad}
@deffn {Function} ncgrad (@var{f}, @var{v})

Computes the gradient of a function
@math{\sum_{i=0}^{\tau_M}\partial f/\partial v(t-i)\delta^i.}

@example
@group
(%i1) load("sac.mc")$
(%i2) ncgrad(x[2](t-2)*x[1](t)+x[1](t-2),[x[1](t),x[2](t)]);
                            2                      2
(%o2)                    [_D  + x (t - 2), x (t) _D ]
                                 2          1
@end group
@end example

@end deffn


@anchor{ncinverse}
@deffn {Function} ncinverse (matrix @var{M})

This routine computes the inverse of a matrix with entries in
@math{{\cal K}[\delta)}, if it exists. Otherwise, signals an error.

@example
@group
(%i1) load("sac.mc")$
(%i2) M:matrix([1+_D,-_D],[_D,1-_D])*^matrix([x[2](t),u(t)],[1,-u(t-2)]);
      [ (x (t - 1) - 1) _D + x (t)    (u(t - 3) + u(t - 1)) _D + u(t)   ]
      [   2                   2                                         ]
(%o2) [                                                                 ]
      [   (x (t - 1) - 1) _D + 1    (u(t - 3) + u(t - 1)) _D - u(t - 2) ]
      [     2                                                           ]
(%i3) ncinverse(M);
      [   (u(t) + u(t - 2)) _D - u(t - 2)  u(t) + (u(t) + u(t - 2)) _D ]
      [ - -------------------------------  --------------------------- ]
      [        u(t) + u(t - 2) x (t)          u(t) + u(t - 2) x (t)    ]
      [                         2                              2       ]
(%o3) [                                                                ]
      [        1 + (x (t) - 1) _D             x (t) + (x (t) - 1) _D   ]
      [              2                         2        2              ]
      [       ---------------------         - ----------------------   ]
      [       u(t) + u(t - 2) x (t)           u(t) + u(t - 2) x (t)    ]
      [                        2                               2       ]
(%i4) ncinverse(M)*^M;
                                 [ 1  0 ]
(%o4)                              [      ]
                                 [ 0  1 ]
(%i5)
@end group
@end example

@end deffn

@anchor{ncrowrank}
@deffn {Function} ncrowrank ( matrix @var{M})

Returns the row rank of @var{M} over @math{{\cal K}[\delta)}.

@example
@group
(%i1) load("sac.mc")$
(%i2) ncrowrank(matrix([_D^2,1],[_D,1+_D],[_D,1-_D]));
(%o2)                                 2
(%i3) M:matrix([u(t),u(t-1),_D],[u(t-1)*_D,u(t-2)*_D,_D^2]);
                     [    u(t)       u(t - 1)    _D  ]
(%o3)                [                               ]
                     [                             2 ]
                     [ u(t - 1) _D  u(t - 2) _D  _D  ]
(%i4) ncrowrank(M);
(%o4)                                 1

@end group
@end example

@end deffn

@anchor{nctriangularize}
@deffn {Function} nctriangularize (matrix @var{M})

Returns a structure with 3 elements: P, S, and Q, such that for the given matrix
 M@math{\in{\cal K}[\delta)^{n\times m}}, P M Q = S.
 P and Q are unimodular matrices,  while  S is an upper-triangular matrix,
 whose elements of the main diagonal are normalized.

@example
@group
(%i1) load("sac.mc")$
@end group
@end example

/* buggy!!  needs work! */
@end deffn

@anchor{p_degree}
@deffn {Function} p_degree (@var{pol})

Given a p-form @math{\omega\in{\cal {E}}^p}, it returns the
integer p.

@example
@group
* (%i1) load("sac.mc")$
* (%i2) p_degree(del(x[1](t),x[3](t-1)));
* (%o2)            2
@end group
@end example

@end deffn

@anchor{protect}
@deffn {Function} protect (@var{s})

Some symbols are reserved for the use of the software.  Assigning them would lead
to weird and hard-to-track bugs.  This command avoids this problem by
reserving the symbol @var{s}.  So far we have reserved @var{t}, @var{del}, @var{true}, and @var{false}.
@example
@group
(%i1) load("sac.mc")$
(%i2) protect(t);
(%o2) neverset
(%i3) t:1;
assignment: cannot assign to t
 -- an error. To debug this try: debugmode(true);
(%i4) unprotect(t)$
(%i5) t:1;
(%o5) 1
@end group
@end example
@xref{unprotect}.
@end deffn

@anchor{psqswap}
@deffn {Function} psqswap ( psqstruct @var{s}, list [@var{r1,c1}], list [@var{r2,c2}])

Given a PSQ structure, and 2 lists of indexes [@var{r1,c1}] and
[@var{r2,c2}], swap rows and columns
of the elements P, S, Q to have P', S', and Q' such that
S'= P' S Q', where S' is obtained by swapping rows @var{r1}
and @var{r2}, and columns @var{c1} and @var{c2}.

@example
@group
(%i1) load("sac.mc")$
(%i2) mypsq:new(PSQ (ident(2),matrix([a,b,c],[d,e,f]),ident(3)));
                                                     [ 1  0  0 ]
                      [ 1  0 ]      [ a  b  c ]      [         ]
(%o2)         PSQ(P = [      ], S = [         ], Q = [ 0  1  0 ])
                      [ 0  1 ]      [ d  e  f ]      [         ]
                                                     [ 0  0  1 ]
(%i3) psqswap(mypsq,[1,1],[2,3]);
                                                     [ 0  0  1 ]
                      [ 0  1 ]      [ f  e  d ]      [         ]
(%o3)         PSQ(P = [      ], S = [         ], Q = [ 0  1  0 ])
                      [ 1  0 ]      [ c  b  a ]      [         ]
                                                     [ 1  0  0 ]
@end group
@end example

@end deffn

@anchor{relshift}
@deffn {Function} relshift (@var{f})

The relative shift of a function \f$f(z_tau)\f$ is defined as the maximal
forward time shift such that the resulting function is still causal.
Mathematically,
@math{rel\_shift(f(z_\tau)) = f(t)= max\{k\in{Z}^+\ \mid\d(f(t+k)\in span_{{\cal {K}}[\delta)} \{dz\}\}}

@example
@group
(%i1) load("sac.mc")$
(%i2) relshift(x[3](t-1)*u(t-4));
(%o2)                                 1
@end group
@end example

@end deffn

@anchor{showalltvars}
@deffn {Function} showalltvars (@var{expr})

This function returns a list of all time-dependent variables appearing in
@code{expr}.

@example
@group
(%i1) load("sac.mc")$
(%i2) w:q*u[1](t-1)*sin(x[2](t-2))*diff(u(t-1),t)*del(u[1](t));
                                         d
(%o2)        q u (t - 1) sin(x (t - 2)) (-- (u(t - 1))) del(u (t))
                1             2          dt                  1
(%i3) showratvars(w);
                                          d
(%o3)      [q, u (t - 1), sin(x (t - 2)), -- (u(t - 1)), del(u (t))]
                1              2          dt                  1
(%i4) showtvars(w);
                                      d
(%o4)          [x (t - 2), u (t - 1), -- (u(t - 1)), del(u (t))]
                 2          1         dt                  1
(%i5) showalltvars(w);
(%o5)               [x (t - 2), u (t - 1), u(t - 1), u (t)]
                      2          1                    1
@end group
@end example
@xref{showtvars}
@end deffn

@anchor{showtvars}
@deffn {Function} showtvars (@var{expr})
This function is like @ref{showalltvars}, but keeping
@code{del}() or @code{diff}() operators.

@example
@group
(%i1) load("sac.mc")$
(%i2) w:q*u[1](t-1)*sin(x[2](t-2))*diff(u(t-1),t)*del(u[1](t))$
(%i3) showtvars(w);
                                      d
(%o3)          [x (t - 2), u (t - 1), -- (u(t - 1)), del(u (t))]
                 2          1         dt
@end group
@end example

@end deffn

@anchor{systdef}
@deffn {Function} systdef (@var{f})
@deffnx {Function} systdef ([@var{f}, @var{h}])
@deffnx {Function} systdef ([@var{f}, @var{h}], [@var{n,v,z}])

Given a system of the form
@math{\eqalign{\dot x &= f(x_\tau,\ u_\tau)\cr y &= h(x_\tau)\cr \hbox{where}\cr x_\tau &= x(t),x(t-1),\ldots,x(t-s)\cr u_\tau &= u(t),u(t-1),\ldots,u(t-s)}}
creates a structure to store it.

There are three main forms of defining a system:

A) S:systdef(f);              ( no output, x=state, u=control)

@example
@group
(%i1) load("sac.mc")$
(%i2) f:matrix([s*(x[2](t)-x[1](t))+u(t)],[x[1](t)*(b-x[3](t))-x[2](t)],[x[1](t)*x[2](t)-a*x[3](t)])$
(%i3) lorenz:systdef(f);
                             [     s (x (t) - x (t))     ]
                             [         2       1         ]
                             [                           ]
(%o3) sys(affine = true, f = [ x (t) (b - x (t)) - x (t) ],
                             [  1          3        2    ]
                             [                           ]
                             [   x (t) x (t) - a x (t)   ]
                             [    1     2         3      ]
     [    - s       s       0    ]
     [                           ]      [ 1 ]
     [ b - x (t)   - 1   - x (t) ]      [   ]
dF = [      3               1    ], g = [ 0 ],
     [                           ]      [   ]
     [   x (t)    x (t)    - a   ]      [ 0 ]
     [    2        1             ]
     [ s (x (t) - x (t)) + u (t) ]
     [     2       1        1    ]
     [                           ]
fg = [ x (t) (b - x (t)) - x (t) ], h = 0, n = 3, m = 1, p = 0,
     [  1          3        2    ]
     [                           ]
     [   x (t) x (t) - a x (t)   ]
     [    1     2         3      ]
statevar = [x (t), x (t), x (t)], controlvar = [u (t)], outputvar = y,
             1      2      3                     1
taumax = 0, hk)
@end group
@end example

B) S:systdef([f,h]);          ( output y=h(x) )

@example
@group
(%i1) load("sac.mc")$

(%i2) f:matrix([x[2](t-2)*u[1](t)],[u[2](t-3)]);
                              [ x (t - 2) u (t) ]
                              [  2         1    ]
(%o2)                         [                 ]
                              [    u (t - 3)    ]
                              [     2           ]
(%i3) h:x[1](t-1)$

(%i4) S:systdef([f,h],[x,u,y]);
                          [            2 ]      [ x (t - 2)   0  ]
                          [ 0  u (t) _D  ]      [  2             ]
(%o4) sys(affine, f, dF = [     1        ], g = [                ],
                          [              ]      [              3 ]
                          [ 0      0     ]      [     0      _D  ]
     [ x (t - 2) u (t) ]
     [  2         1    ]
fg = [                 ], h = [ x (t - 1) ], n = 2, m = 2, p = 1,
     [    u (t - 3)    ]      [  1        ]
     [     2           ]
statevar = [x (t), x (t)], controlvar = [u (t), u (t)], outputvar = [y (t)],
            1      2                     1      2                    1
taumax = 3)

@end group
@end example

 C) S:systdef([f,h],[n,v,z]);  ( n=state, v=control, z=output variables)

@example
@group
(%i1) load("sac.mc")$

(%i2) f:matrix([n[2](t)],[v[1](t)])$

(%i3) h:matrix([n[1](t)],[n[2](t-1)]);
                                 [   n (t)   ]
                                 [    1      ]
(%o3)                            [           ]
                                 [ n (t - 1) ]
                                 [  2        ]
(%i4) S:systdef([f,h],[n,v,z]);
                             [ n (t) ]       [ 0  1 ]      [ 0 ]
(%o4) sys(affine = true, f = [  2    ], dF = [      ], g = [   ],
                             [       ]       [ 0  0 ]      [ 1 ]
                             [   0   ]
     [ n (t) ]      [   n (t)   ]
     [  2    ]      [    1      ]
fg = [       ], h = [           ], n = 2, m = 1, p = 2,
     [ v (t) ]      [ n (t - 1) ]
     [  1    ]      [  2        ]
statevar = [n (t), n (t)], controlvar = [v (t)], outputvar = [z (t), z (t)],
             1      2                     1                    1      2
taumax = 0, hk)

@end group
@end example

@end deffn

@anchor{tshift}
@deffn {Function} tshift

@code{tshift}(@var{f})

@code{tshift}(@var{f},s)

Shifts in time its first argument, which can be
any valid function, polynomial, matrix, p-form, or a list of these elements.  If a second argument s is given, it shifts the first argument by s units of time.
@example
@group
(%i1) load("sac.mc")$
(%i2) tshift(x(t-2),4);
(%o2)    x(t - 6)
(%i3) tshift([matrix([x(t-1)],[u(t)]),x[3](t-3)]);
                           [ x(t - 2) ]
(%o6)                     [[          ], x (t - 4)]
                           [ u(t - 1) ]   3
@end group
@end example

@end deffn

@anchor{unprotect}
@deffn {Function} unprotect (@var{s})
Removes the protection of the protected symbol @var{s}.
@xref{protect} for an example.
@end deffn
@deffn {Function} wedge (@var{p1-form1}, @var{p2-form},...)

Computes the wedge product of its arguments
@math{\Lambda:{\cal E}^{p_1}\times\cdots\times{\cal E}^{p_s}\to{\cal E}^{\Sigma p_i}}
, which can be functions or p-forms.
@example
@group
(%i1) load("sac.mc")$
(%i2) wedge(del(x[1](t-1)), del(x[1](t-2),x[2](t)) );
(%o2)                - del(x (t - 2), x (t - 1), x (t))
                             1          1          2
@end group
@end example
Note that d(x)@math{\wedge}d(y) is written as d(x,y).

@end deffn



@node Function and variable index,  , Definitions for SAC, Top
@appendix Function and variable index
@printindex fn
@printindex vr

@bye


@defvr {Variable} frotz
Default value: @code{true}

When @code{frotz} is @code{true},
@code{transmogrify} computes the transmogrification by Smith's algorithm.
Otherwise, the transmogrification is computed by Jones' algorithm.
@xref{coefpow}
@end defvr

@deffn  {Function} infix @
@fname{infix} (@var{op}) @
@fname{infix} (@var{op}, @var{lbp}, @var{rbp}) @
@fname{infix} (@var{op}, @var{lbp}, @var{rbp}, @var{lpos}, @var{rpos}, @var{pos})


@anchor{nombrefn}
@deffn {Function} nombrefn (@var{pol})

@example
@group

@end group
@end example

@end deffn
